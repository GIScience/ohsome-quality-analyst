import unittest

import numpy as np

from ohsome_quality_analyst.indicators.mapping_saturation import models


class TestStringMethods(unittest.TestCase):
    def setUp(self):
        # The ohsome API response result values for Heidelberg and the layer
        # `building_count`
        self.values = np.asarray(
            [
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                4.0,
                44.0,
                114.0,
                226.0,
                241.0,
                252.0,
                266.0,
                272.0,
                275.0,
                279.0,
                298.0,
                306.0,
                307.0,
                426.0,
                430.0,
                472.0,
                482.0,
                498.0,
                502.0,
                543.0,
                555.0,
                557.0,
                607.0,
                610.0,
                631.0,
                637.0,
                655.0,
                660.0,
                695.0,
                695.0,
                1011.0,
                5669.0,
                7217.0,
                8579.0,
                8755.0,
                8990.0,
                9043.0,
                9288.0,
                9412.0,
                9670.0,
                9721.0,
                9734.0,
                9773.0,
                10068.0,
                10416.0,
                10521.0,
                10537.0,
                10754.0,
                10840.0,
                10957.0,
                11477.0,
                11530.0,
                11718.0,
                11767.0,
                11981.0,
                12067.0,
                12646.0,
                12925.0,
                13698.0,
                14369.0,
                15360.0,
                15449.0,
                15564.0,
                15743.0,
                16052.0,
                16459.0,
                17613.0,
                18721.0,
                19786.0,
                20600.0,
                21283.0,
                21587.0,
                21712.0,
                21903.0,
                22655.0,
                22860.0,
                23022.0,
                23200.0,
                23253.0,
                23491.0,
                23541.0,
                23608.0,
                23652.0,
                23701.0,
                23721.0,
                23792.0,
                23814.0,
                23955.0,
                23982.0,
                24037.0,
                24124.0,
                24203.0,
                24805.0,
                24809.0,
                24960.0,
                25138.0,
                25650.0,
                25692.0,
                25869.0,
                26255.0,
                26265.0,
                26313.0,
                26330.0,
                26456.0,
                26549.0,
                26553.0,
                26592.0,
                26690.0,
                26760.0,
                26931.0,
                26920.0,
                27074.0,
                27113.0,
                27139.0,
                27369.0,
                27456.0,
                28372.0,
                28837.0,
                28900.0,
                28945.0,
                28948.0,
                28953.0,
                28954.0,
                28954.0,
                28957.0,
                29003.0,
                29047.0,
                29091.0,
                29109.0,
                29137.0,
                29179.0,
                29202.0,
                29271.0,
                29270.0,
                29267.0,
                29287.0,
                29297.0,
                29301.0,
                29321.0,
                29330.0,
                29334.0,
                29348.0,
                29378.0,
                29406.0,
                29501.0,
                29523.0,
                29548.0,
                29551.0,
                29606.0,
                29624.0,
                29634.0,
                29631.0,
                29642.0,
                29702.0,
                29697.0,
                29696.0,
                29792.0,
                29800.0,
                29806.0,
            ]
        )
        self.xdata = np.asarray(range(len(self.values)))

    def test_sigmoid(self):
        model = models.Sigmoid(self.xdata, self.values)
        guess = model.get_initial_guess(self.xdata, self.values)
        self.assertIsNotNone(guess)
        bounds = model.get_bounds(self.xdata, self.values)
        self.assertIsNotNone(bounds)
        self.assertIsNotNone(model.coefficients)

    def test_sslogis(self):
        model = models.SSlogis(self.xdata, self.values)
        self.assertIsNotNone(model.coefficients)


if __name__ == "__main__":
    unittest.main()
