-- Setup required DB functionality

CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- DROP SCHEMA "admin";

CREATE SCHEMA "admin" AUTHORIZATION hexadmin;
COMMENT ON SCHEMA "admin" IS 'This schema corresponds to ohsomehex-db schema admin: https://gitlab.gistools.geog.uni-heidelberg.de/giscience/big-data/ohsome/apps/hex/ohsomehex-db.git';


-- email-pattern as defined in HTML5 spec: https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)
CREATE DOMAIN "admin".email AS citext
  CHECK ( value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' );


CREATE TABLE "admin".aggregation_type (
    "name" text PRIMARY KEY,
    description text NULL
);
COMMENT ON TABLE "admin".aggregation_type IS 'values of features are computed in differing ways and might need different handling when aggregating values of several features to one value, e.g. sum, min, max, avg etc...';

ALTER TABLE "admin".aggregation_type OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".aggregation_type TO hexadmin;


INSERT INTO "admin".aggregation_type ("name",description) VALUES
    ('NONE','Aggregation of two or more feature values is not possible.'),
    ('SUM','Sums up the values of two or more features.'),
    ('MIN','Returns the smallest value of two or more features.'),
    ('MAX','Returns the largest value of two or more features.'),
    ('AVG','Returns the average (mean) of two or more features. IMPORTANT: You have to set an aggregation column to the wms-layers belonging to this hex-layer. This should contain the count of objects on which the single average value of a feature/cell has been computed. If you don''t have this information set aggregation_type to NONE.'),
    ('QUOTIENT_SUM','Use this if your value is the result of a division (quotient, ratio, fraction) and the aggregated result should be the quotient of the sums of the original numerators and denominators. IMPORTANT: You have to set an aggregation_column in the wms-layers belonging to this hex-layer. This should contain the denominator value which was used to compute the single features quotient value. Aggregation of two features values wors like this: newValue = (a * a_denominator + b * b_denominator)  / ( a_denominator + b_denominator );');

-- Drop table

-- DROP TABLE "admin".hex_layer;

CREATE TABLE "admin".hex_layer (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"name" varchar(128) NOT NULL,
	title varchar(128) NOT NULL,
	description text NULL,
	visible bool NOT NULL DEFAULT false,
	unit varchar NULL,
	aggregation_type text NOT NULL DEFAULT 'NONE',
	available_times jsonb NULL, -- json array containing ISO 8601 date strings or date-time strings without fractions of seconds and using UTC timezone offset
	regular_period text NULL, -- ISO 8601 Duration. If specified all available timestamps should be regular and spaced following this pattern, e.g. P1M for monthly steps
	time_type text NOT NULL, -- type of available_times items, either "snapshot" (ISO timestamps) or "interval" (ISO time intervals)
	CONSTRAINT hex_layer_name_check CHECK (((name)::text ~ '^[0-9A-Za-z~:\+\-_\(\)\.,*'']+$'::text)),
	CONSTRAINT hex_layer_time_type_check CHECK (time_type IN ('SNAPSHOT','INTERVAL')),
	CONSTRAINT hex_layer_pk PRIMARY KEY (id),
	CONSTRAINT hex_layer_un UNIQUE (name),
	CONSTRAINT hex_layer_aggregation_type_fk FOREIGN KEY (aggregation_type) REFERENCES "admin".aggregation_type("name") ON UPDATE CASCADE ON DELETE RESTRICT
);
COMMENT ON TABLE "admin".hex_layer IS 'contains metainformation about un/published layers';
COMMENT ON COLUMN "admin".hex_layer.available_times IS 'json array containing ISO8601 date strings or date-time strings without fractions of seconds and using UTC timezone offset';
COMMENT ON COLUMN "admin".hex_layer.regular_period IS 'ISO 8601 Duration. If specified all available timestamps should be regular and spaced following this pattern';
COMMENT ON COLUMN "admin".hex_layer.time_type IS 'type of available_times items, either "SNAPSHOT" (ISO timestamps) or "INTERVAL" (ISO time intervals)';

-- Permissions

ALTER TABLE "admin".hex_layer OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".hex_layer TO hexadmin;

-- Drop table

-- DROP TABLE "admin".tag;

CREATE TABLE "admin".tag (
	"name" text NOT NULL,
	description text NULL,
	color text NULL,
	CONSTRAINT tag_pk PRIMARY KEY (name),
	CONSTRAINT tag_color_check CHECK ((color::text ~ '^#[0-9A-Fa-f]{6}$'::text))
);
COMMENT ON TABLE "admin".tag IS 'tags to group or filter hex_layers';
COMMENT ON COLUMN "admin".tag.color IS 'color in hexadecimal RGB with a leading #, e.g. #31dfa5';

-- Permissions

ALTER TABLE "admin".tag OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".tag TO hexadmin;

-- Drop table

-- DROP TABLE "admin".wms_layer;

CREATE TABLE "admin".wms_layer (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"name" varchar NOT NULL, -- wms layer name as specified in WMS LAYERS param
	relation varchar NULL, -- relation (table) which is used as source of values and WMS layer
	value_column varchar NULL, -- column name which is used to display values
	aggregation_column varchar NULL, -- column name which is used to compute aggregations of type 'AVG' or 'QUOTIENT_*'
	CONSTRAINT wms_layer_pk PRIMARY KEY (id),
	CONSTRAINT wms_layer_un UNIQUE (name)
);
COMMENT ON TABLE "admin".wms_layer IS 'registry for wms geoserver layers';

-- Column comments

COMMENT ON COLUMN "admin".wms_layer."name" IS 'wms layer name as specified in WMS LAYERS param';
COMMENT ON COLUMN "admin".wms_layer.value_column IS 'column name which is used to display values';
COMMENT ON COLUMN "admin".wms_layer.relation IS 'relation (table) which is used as source of values and WMS layer';

-- Permissions

ALTER TABLE "admin".wms_layer OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".wms_layer TO hexadmin;

-- Drop table

-- DROP TABLE "admin".hex_layer_link;

CREATE TABLE "admin".hex_layer_link (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	hex_layer_id int4 NOT NULL,
	"order" int4 NOT NULL DEFAULT 0,
	href text NOT NULL,
	displaytext text NULL,
	title text NULL,
	CONSTRAINT hex_layer_link_pkey PRIMARY KEY (id),
	CONSTRAINT hex_layer_link_fk FOREIGN KEY (hex_layer_id) REFERENCES "admin".hex_layer(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);

-- Permissions

ALTER TABLE "admin".hex_layer_link OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".hex_layer_link TO hexadmin;

-- Drop table

-- DROP TABLE "admin".x_hex_layer_tag;

CREATE TABLE "admin".x_hex_layer_tag (
	hex_layer_id int4 NOT NULL,
	tag_name varchar NOT NULL,
	CONSTRAINT x_hex_layer_tag_pk PRIMARY KEY (hex_layer_id, tag_name),
	CONSTRAINT x_hex_layer_tag_fk FOREIGN KEY (hex_layer_id) REFERENCES "admin".hex_layer(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	CONSTRAINT x_hex_layer_tag_fk_1 FOREIGN KEY (tag_name) REFERENCES "admin".tag(name) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Permissions

ALTER TABLE "admin".x_hex_layer_tag OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".x_hex_layer_tag TO hexadmin;

-- Drop table

-- DROP TABLE "admin".x_hex_wms_layer;

CREATE TABLE "admin".x_hex_wms_layer (
	hex_id int4 NOT NULL,
	wms_id int4 NOT NULL,
	zoomlevel int4 NOT NULL, -- zoomlevels according to XYZ tiles schema, where this layer schoud be visible
	wms_layer_order_per_zoomlevel int4 NOT NULL DEFAULT 0, -- defines the rendering order if several layers are defined per zoomlevel
	queryable bool NOT NULL DEFAULT true, -- true for the layer which is used to get values for. Only one layer should be set to queryable per hexLayer.
	CONSTRAINT x_hex_wms_layer_pk PRIMARY KEY (hex_id, wms_id, zoomlevel),
	CONSTRAINT x_hex_wms_layer_fk FOREIGN KEY (hex_id) REFERENCES "admin".hex_layer(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
	CONSTRAINT x_hex_wms_layer_wms_fk FOREIGN KEY (wms_id) REFERENCES "admin".wms_layer(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
);
COMMENT ON TABLE "admin".x_hex_wms_layer IS 'relates one hex layer with several wmslayers for different zoomlevels.
And relates one wms layer to possibly more than one hex layer, which might happen at some point';

-- Column comments

COMMENT ON COLUMN "admin".x_hex_wms_layer.zoomlevel IS 'zoomlevels according to XYZ tiles schema, where this layer should be visible';
COMMENT ON COLUMN "admin".x_hex_wms_layer.wms_layer_order_per_zoomlevel IS 'defines the rendering order if several layers are defined per zoomlevel';
COMMENT ON COLUMN "admin".x_hex_wms_layer.queryable IS 'true for the layer which is used to get values for. Only one layer should be set to queryable per hexLayer.';

-- Permissions

ALTER TABLE "admin".x_hex_wms_layer OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".x_hex_wms_layer TO hexadmin;

-- Drop table

-- DROP TABLE "admin"."user";

CREATE TABLE "admin"."user" (
	id uuid NOT NULL,
	realm text NULL,
	username text NOT NULL,
	email "admin".email NOT NULL,
	emailverified bool NULL,
	verificationtoken text NULL,
	CONSTRAINT user_email_key UNIQUE (email),
	CONSTRAINT user_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE "admin"."user" IS 'Used to store user information to facilitate authorization to admin-api with JWT';

-- Permissions

ALTER TABLE "admin"."user" OWNER TO hexadmin;
GRANT ALL ON TABLE "admin"."user" TO hexadmin;


-- Drop table

-- DROP TABLE "admin".usercredentials;

CREATE TABLE "admin".usercredentials (
	id uuid NOT NULL,
	"password" text NOT NULL,
	userid uuid NOT NULL,
	CONSTRAINT usercredentials_min_password_length CHECK ((length(password) >= 8)),
	CONSTRAINT usercredentials_pkey PRIMARY KEY (id),
	CONSTRAINT usercredentials_userid_fkey FOREIGN KEY (userid) REFERENCES "admin"."user"(id) ON UPDATE CASCADE ON DELETE CASCADE
);
COMMENT ON TABLE "admin".usercredentials IS 'Used to store user credentials to facilitate authorization to admin-api with JWT';

-- Permissions

ALTER TABLE "admin".usercredentials OWNER TO hexadmin;
GRANT ALL ON TABLE "admin".usercredentials TO hexadmin;

----------------------------------------------------------------------------
-- CREATE default user
-- Please delete the default user after you have created another ADMIN user
-- !! Otherwise, this could be a security risk !!
----------------------------------------------------------------------------
BEGIN;
INSERT INTO "admin"."user" (id, realm, username, email, emailverified, verificationtoken)
VALUES (uuid_generate_v4(), 'ADMIN', 'master', 'admin@example.org', TRUE, uuid_generate_v4());

INSERT INTO "admin".usercredentials (id, "password", userid)
VALUES
	(
	(SELECT id FROM "admin"."user" WHERE email = 'admin@example.org'),
	(SELECT crypt('adminmaster', gen_salt('bf', 10))),
	(SELECT id FROM "admin"."user" WHERE email = 'admin@example.org')
	);
COMMIT;

----------------------------------------------------------------------------
-- NOTIFY subscribers of server-side events
-- Notify subscribers (ohsomehex-api) when layer configuration changes
-- Subscribers can: LISTEN "ohsomehex-db-change";
-- This notification is triggered when an ohsomehex-layer is added/deleted, the hex_layer table is truncated or the "visible" property of an existing layer is updated
----------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION "admin".notify_trigger() RETURNS TRIGGER AS
$trigger$
BEGIN
	PERFORM pg_notify('admin-ohsomehex-db-change', '"change: admin.hex_layer"');
	RETURN NULL;
END;
$trigger$
LANGUAGE plpgsql;


CREATE TRIGGER change_notify AFTER
INSERT OR
UPDATE OF visible OR
DELETE OR
TRUNCATE
ON "admin".hex_layer
FOR EACH STATEMENT EXECUTE PROCEDURE "admin".notify_trigger();
